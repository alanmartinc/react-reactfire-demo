import * as React from 'react';
import { user } from 'rxfire/auth';
import { useObservable, useFirebaseApp } from '..';
function getAuthFromContext() {
    var firebaseApp = useFirebaseApp();
    if (!firebaseApp) {
        throw new Error('Firebase not found in context. Either pass it directly to a reactfire hook, or wrap your component in a FirebaseAppProvider');
    }
    var authFunc = firebaseApp.auth;
    if (!authFunc || !authFunc()) {
        throw new Error("No auth object off of Firebase. Did you forget to import 'firebase/auth' in a component?");
    }
    return authFunc();
}
export function useUser(auth, options) {
    auth = auth || getAuthFromContext();
    return useObservable(user(auth), 'user', options ? options.startWithValue : undefined);
}
export function AuthCheck(_a) {
    var auth = _a.auth, fallback = _a.fallback, children = _a.children, requiredClaims = _a.requiredClaims;
    var user = useUser(auth);
    React.useLayoutEffect(function () {
        if (requiredClaims) {
            throw user.getIdTokenResult().then(function (idTokenResult) {
                var claims = idTokenResult.claims;
                var missingClaims = {};
                Object.keys(requiredClaims).forEach(function (claim) {
                    if (requiredClaims[claim] !== claims[claim]) {
                        missingClaims[claim] = {
                            expected: requiredClaims[claim],
                            actual: claims[claim]
                        };
                    }
                });
                if (Object.keys(missingClaims).length > 0) {
                    throw new Error("Mismatched Claims: " + JSON.stringify(missingClaims));
                }
            });
        }
    });
    if (!user) {
        return fallback;
    }
    else {
        return children;
    }
}
