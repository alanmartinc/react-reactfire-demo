import { first } from 'rxjs/operators';
var ActiveRequest = (function () {
    function ActiveRequest(promise) {
        this.promise = promise;
        this.isComplete = false;
    }
    ActiveRequest.prototype.setValue = function (value) {
        this.value = value;
        this.isComplete = true;
    };
    return ActiveRequest;
}());
var ObservablePromiseCache = (function () {
    function ObservablePromiseCache() {
        this.activeRequests = new Map();
    }
    ObservablePromiseCache.prototype.getRequest = function (observable$, observableId) {
        var request = this.activeRequests.get(observableId);
        if (!request) {
            request = new ActiveRequest(observable$.pipe(first()).toPromise());
            this.activeRequests.set(observableId, request);
        }
        return request;
    };
    ObservablePromiseCache.prototype.removeRequest = function (observableId) {
        this.activeRequests.delete(observableId);
    };
    return ObservablePromiseCache;
}());
export { ObservablePromiseCache };
