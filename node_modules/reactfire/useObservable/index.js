import * as React from 'react';
import { startWith } from 'rxjs/operators';
import { ObservablePromiseCache } from './requestCache';
var requestCache = new ObservablePromiseCache();
function suspendUntilFirst(observable$, observableId) {
    var request = requestCache.getRequest(observable$, observableId);
    if (request.isComplete === false) {
        throw request.promise
            .then(function (result) {
            request.setValue(result);
        })
            .catch(function (err) {
            request.isComplete = true;
            throw err;
        });
    }
    if (request.error) {
        throw request.error;
    }
    return request.value;
}
export function useObservable(observable$, observableId, startWithValue) {
    var initialValue = startWithValue || suspendUntilFirst(observable$, observableId);
    var _a = React.useState(initialValue), latestValue = _a[0], setValue = _a[1];
    React.useEffect(function () {
        var subscription = observable$.pipe(startWith(initialValue)).subscribe(function (newVal) {
            setValue(newVal);
        }, function (error) {
            console.error('There was an error', error);
            throw error;
        });
        return function () {
            subscription.unsubscribe();
            requestCache.removeRequest(observableId);
        };
    }, [observableId]);
    return latestValue;
}
