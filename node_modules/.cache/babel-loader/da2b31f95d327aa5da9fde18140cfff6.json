{"ast":null,"code":"import { __assign, __spreadArrays } from 'tslib';\nimport { Observable } from 'rxjs';\nimport { map, filter, scan } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nfunction _fromRef(ref, options) {\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return new Observable(function (subscriber) {\n    var unsubscribe = ref.onSnapshot(options || {}, subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n\nfunction fromRef(ref, options) {\n  return _fromRef(ref, options);\n}\n\nfunction fromDocRef(ref, options) {\n  return fromRef(ref, options);\n}\n\nfunction fromCollectionRef(ref, options) {\n  return fromRef(ref, options);\n}\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction doc(ref) {\n  return fromDocRef(ref);\n}\n/**\r\n * Returns a stream of a document, mapped to its data payload and optionally the document ID\r\n * @param query\r\n */\n\n\nfunction docData(ref, idField) {\n  return doc(ref).pipe(map(function (snap) {\n    return snapToData(snap, idField);\n  }));\n}\n\nfunction snapToData(snapshot, idField) {\n  var _a;\n\n  return __assign(__assign({}, snapshot.data()), idField ? (_a = {}, _a[idField] = snapshot.id, _a) : null);\n}\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ALL_EVENTS = ['added', 'modified', 'removed'];\n/**\r\n * Create an operator that determines if a the stream of document changes\r\n * are specified by the event filter. If the document change type is not\r\n * in specified events array, it will not be emitted.\r\n */\n\nvar filterEvents = function (events) {\n  return filter(function (changes) {\n    var hasChange = false;\n\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i];\n\n      if (events && events.indexOf(change.type) >= 0) {\n        hasChange = true;\n        break;\n      }\n    }\n\n    return hasChange;\n  });\n};\n/**\r\n * Create an operator that filters out empty changes. We provide the\r\n * ability to filter on events, which means all changes can be filtered out.\r\n * This creates an empty array and would be incorrect to emit.\r\n */\n\n\nvar filterEmpty = filter(function (changes) {\n  return changes.length > 0;\n});\n/**\r\n * Creates a new sorted array from a new change.\r\n * @param combined\r\n * @param change\r\n */\n\nfunction processIndividualChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.id === change.doc.id) ;else {\n        combined.splice(change.newIndex, 0, change);\n      }\n      break;\n\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.id === change.doc.id) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          combined.splice(change.oldIndex, 1);\n          combined.splice(change.newIndex, 0, change);\n        } else {\n          combined[change.newIndex] = change;\n        }\n      }\n\n      break;\n\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.id === change.doc.id) {\n        combined.splice(change.oldIndex, 1);\n      }\n\n      break;\n\n    default: // ignore\n\n  }\n\n  return combined;\n}\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n * @param current\r\n * @param changes\r\n * @param events\r\n */\n\n\nfunction processDocumentChanges(current, changes, events) {\n  if (events === void 0) {\n    events = ALL_EVENTS;\n  }\n\n  changes.forEach(function (change) {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = processIndividualChange(current, change);\n    }\n  });\n  return current;\n}\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n * @param query\r\n */\n\n\nfunction collectionChanges(query, events) {\n  if (events === void 0) {\n    events = ALL_EVENTS;\n  }\n\n  return fromCollectionRef(query).pipe(map(function (snapshot) {\n    return snapshot.docChanges();\n  }), filterEvents(events), filterEmpty);\n}\n/**\r\n * Return a stream of document snapshots on a query. These results are in sort order.\r\n * @param query\r\n */\n\n\nfunction collection(query) {\n  return fromCollectionRef(query).pipe(map(function (changes) {\n    return changes.docs;\n  }));\n}\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n * @param query\r\n */\n\n\nfunction sortedChanges(query, events) {\n  return collectionChanges(query, events).pipe(scan(function (current, changes) {\n    return processDocumentChanges(current, changes, events);\n  }, []));\n}\n/**\r\n * Create a stream of changes as they occur it time. This method is similar\r\n * to docChanges() but it collects each event in an array over time.\r\n */\n\n\nfunction auditTrail(query, events) {\n  return collectionChanges(query, events).pipe(scan(function (current, action) {\n    return __spreadArrays(current, action);\n  }, []));\n}\n/**\r\n * Returns a stream of documents mapped to their data payload, and optionally the document ID\r\n * @param query\r\n */\n\n\nfunction collectionData(query, idField) {\n  return collection(query).pipe(map(function (arr) {\n    return arr.map(function (snap) {\n      return snapToData(snap, idField);\n    });\n  }));\n}\n\nexport { auditTrail, collection, collectionChanges, collectionData, doc, docData, fromCollectionRef, fromDocRef, fromRef, snapToData, sortedChanges };","map":null,"metadata":{},"sourceType":"module"}