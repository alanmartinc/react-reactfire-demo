{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as firebase from 'firebase/app';\nimport * as React from 'react';\nvar FirebaseAppContext = React.createContext(undefined);\nexport function FirebaseAppProvider(props) {\n  var firebaseConfig = props.firebaseConfig,\n      initPerformance = props.initPerformance;\n  var firebaseApp = props.firebaseApp;\n  firebaseApp = firebaseApp || React.useMemo(function () {\n    if (!firebase.apps.length) {\n      firebase.initializeApp(firebaseConfig);\n    }\n\n    return firebase;\n  }, [firebaseConfig]);\n  React.useMemo(function () {\n    if (initPerformance === true && !!firebase.apps.length) {\n      firebase.performance();\n    }\n  }, [initPerformance, firebaseApp]);\n  return React.createElement(FirebaseAppContext.Provider, __assign({\n    value: firebaseApp\n  }, props));\n}\nexport function useFirebaseApp() {\n  var firebaseApp = React.useContext(FirebaseAppContext);\n\n  if (!firebaseApp) {\n    throw new Error('Cannot call useFirebaseApp unless your component is within a FirebaseAppProvider');\n  }\n\n  return firebaseApp;\n}","map":null,"metadata":{},"sourceType":"module"}