{"ast":null,"code":"import * as React from 'react';\nimport { user } from 'rxfire/auth';\nimport { useObservable, useFirebaseApp } from '..';\n\nfunction getAuthFromContext() {\n  var firebaseApp = useFirebaseApp();\n\n  if (!firebaseApp) {\n    throw new Error('Firebase not found in context. Either pass it directly to a reactfire hook, or wrap your component in a FirebaseAppProvider');\n  }\n\n  var authFunc = firebaseApp.auth;\n\n  if (!authFunc || !authFunc()) {\n    throw new Error(\"No auth object off of Firebase. Did you forget to import 'firebase/auth' in a component?\");\n  }\n\n  return authFunc();\n}\n\nexport function useUser(auth, options) {\n  auth = auth || getAuthFromContext();\n  return useObservable(user(auth), 'user', options ? options.startWithValue : undefined);\n}\nexport function AuthCheck(_a) {\n  var auth = _a.auth,\n      fallback = _a.fallback,\n      children = _a.children,\n      requiredClaims = _a.requiredClaims;\n  var user = useUser(auth);\n  React.useLayoutEffect(function () {\n    if (requiredClaims) {\n      throw user.getIdTokenResult().then(function (idTokenResult) {\n        var claims = idTokenResult.claims;\n        var missingClaims = {};\n        Object.keys(requiredClaims).forEach(function (claim) {\n          if (requiredClaims[claim] !== claims[claim]) {\n            missingClaims[claim] = {\n              expected: requiredClaims[claim],\n              actual: claims[claim]\n            };\n          }\n        });\n\n        if (Object.keys(missingClaims).length > 0) {\n          throw new Error(\"Mismatched Claims: \" + JSON.stringify(missingClaims));\n        }\n      });\n    }\n  });\n\n  if (!user) {\n    return fallback;\n  } else {\n    return children;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}