{"ast":null,"code":"import * as React from 'react';\nimport { startWith } from 'rxjs/operators';\nimport { ObservablePromiseCache } from './requestCache';\nvar requestCache = new ObservablePromiseCache();\n\nfunction suspendUntilFirst(observable$, observableId) {\n  var request = requestCache.getRequest(observable$, observableId);\n\n  if (request.isComplete === false) {\n    throw request.promise.then(function (result) {\n      request.setValue(result);\n    }).catch(function (err) {\n      request.isComplete = true;\n      throw err;\n    });\n  }\n\n  if (request.error) {\n    throw request.error;\n  }\n\n  return request.value;\n}\n\nexport function useObservable(observable$, observableId, startWithValue) {\n  var initialValue = startWithValue || suspendUntilFirst(observable$, observableId);\n\n  var _a = React.useState(initialValue),\n      latestValue = _a[0],\n      setValue = _a[1];\n\n  React.useEffect(function () {\n    var subscription = observable$.pipe(startWith(initialValue)).subscribe(function (newVal) {\n      setValue(newVal);\n    }, function (error) {\n      console.error('There was an error', error);\n      throw error;\n    });\n    return function () {\n      subscription.unsubscribe();\n      requestCache.removeRequest(observableId);\n    };\n  }, [observableId]);\n  return latestValue;\n}","map":null,"metadata":{},"sourceType":"module"}