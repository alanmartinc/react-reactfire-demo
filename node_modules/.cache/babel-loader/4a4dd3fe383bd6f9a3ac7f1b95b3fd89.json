{"ast":null,"code":"import { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create an observable of authentication state. The observer is only\r\n * triggered on sign-in or sign-out.\r\n * @param auth firebase.auth.Auth\r\n */\n\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = auth.onAuthStateChanged(subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\r\n * Create an observable of user state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\n\n\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = auth.onIdTokenChanged(subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\r\n * Create an observable of idToken state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\n\n\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(user.getIdToken()) : of(null);\n  }));\n}\n\nexport { authState, idToken, user };","map":null,"metadata":{},"sourceType":"module"}