{"ast":null,"code":"import { first } from 'rxjs/operators';\n\nvar ActiveRequest = function () {\n  function ActiveRequest(promise) {\n    this.promise = promise;\n    this.isComplete = false;\n  }\n\n  ActiveRequest.prototype.setValue = function (value) {\n    this.value = value;\n    this.isComplete = true;\n  };\n\n  return ActiveRequest;\n}();\n\nvar ObservablePromiseCache = function () {\n  function ObservablePromiseCache() {\n    this.activeRequests = new Map();\n  }\n\n  ObservablePromiseCache.prototype.getRequest = function (observable$, observableId) {\n    var request = this.activeRequests.get(observableId);\n\n    if (!request) {\n      request = new ActiveRequest(observable$.pipe(first()).toPromise());\n      this.activeRequests.set(observableId, request);\n    }\n\n    return request;\n  };\n\n  ObservablePromiseCache.prototype.removeRequest = function (observableId) {\n    this.activeRequests.delete(observableId);\n  };\n\n  return ObservablePromiseCache;\n}();\n\nexport { ObservablePromiseCache };","map":null,"metadata":{},"sourceType":"module"}